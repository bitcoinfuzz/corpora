name: Check

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout bitcoinfuzz repo
        uses: actions/checkout@v4
        with:
          repository: bitcoinfuzz/bitcoinfuzz
          path: bitcoinfuzz
          submodules: recursive

      - name: Install rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable

      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Setup Python and install embit
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          pip install -r bitcoinfuzz/modules/embit/requirements.txt
          pip install mako

      - name: Install LLVM and Clang - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Install build dependencies - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install autoconf gnu-sed automake libtool gettext pkg-config protobuf libsodium

      - name: Setup common environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          export CC=/usr/bin/clang
          export CXX=/usr/bin/clang++
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup common environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          export CC=$(brew --prefix llvm@18)/bin/clang
          export CXX=$(brew --prefix llvm@18)/bin/clang++
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Build - Bitcoin Core
        timeout-minutes: 40
        run: |
          if [ "${{ matrix.os }}" == "macos-14" ]; then
            export PATH="/usr/local/opt/autoconf/bin:/usr/local/opt/automake/bin:/usr/local/opt/libtool/bin:$PATH"
          fi
          cd bitcoinfuzz/modules/bitcoin && make

      - name: Build - custommutator
        timeout-minutes: 40
        run: |
          cd bitcoinfuzz/modules/custommutator && make

      - name: Build - rust bitcoin
        timeout-minutes: 5
        run: |
          rustup default nightly
          cd bitcoinfuzz/modules/rustbitcoin && make cargo && make

      - name: Build - rust miniscript
        timeout-minutes: 5
        run: |
          rustup default nightly
          cd bitcoinfuzz/modules/rustminiscript && make cargo && make

      - name: Build - btcd
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/btcd && make

      - name: Build - embit
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/embit && make

      - name: Build - lnd
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/lnd && make

      - name: Build - ldk
        timeout-minutes: 5
        run: |
          rustup default nightly
          cd bitcoinfuzz/modules/ldk && make cargo && make

      - name: Build - nlightning
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/nlightning && make

      - name: Build - clightning
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/clightning && make

      - name: Build - eclair
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/eclair && make

      - name: Cache build artifacts
        uses: actions/cache/save@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]
        test:
          - corpus: "script"
            target: "script"
            cxxflags: "-DBITCOIN_CORE -DRUST_BITCOIN"
            asan_options: "detect_container_overflow=0"
          - corpus: "deserialize_block"
            target: "deserialize_block"
            cxxflags: "-DBITCOIN_CORE -DRUST_BITCOIN -DBTCD"
            asan_options: ""
          - corpus: "script_eval"
            target: "script_eval"
            cxxflags: "-DBITCOIN_CORE -DBTCD"
            asan_options: ""
          - corpus: "descriptor_parse_clean"
            target: "descriptor_parse"
            cxxflags: "-DBITCOIN_CORE -DRUST_MINISCRIPT"
            asan_options: "detect_leaks=0:detect_container_overflow=0"
          - corpus: "miniscript_parse_clean"
            target: "miniscript_parse"
            cxxflags: "-DBITCOIN_CORE -DRUST_MINISCRIPT"
            asan_options: "detect_leaks=0:detect_container_overflow=0"
          - corpus: "script_asm"
            target: "script_asm"
            cxxflags: "-DBITCOIN_CORE -DBTCD"
            asan_options: ""
          - corpus: "address_parse"
            target: "address_parse"
            cxxflags: "-DBITCOIN_CORE -DRUST_BITCOIN -DBTCD"
            asan_options: "detect_container_overflow=0"
          - corpus: "psbt_parse_clean"
            target: "psbt_parse"
            cxxflags: "-DBITCOIN_CORE -DRUST_BITCOIN -DBTCD"
            asan_options: "detect_leaks=0:detect_container_overflow=0"
          - corpus: "cmpctblocks_parse"
            target: "cmpctblocks_parse"
            cxxflags: "-DBITCOIN_CORE -DRUST_BITCOIN"
            asan_options: "detect_leaks=0:detect_container_overflow=0"
          - corpus: "parse_p2p_message"
            target: "parse_p2p_message"
            cxxflags: "-DRUST_BITCOIN -DBTCD -DCUSTOM_MUTATOR_P2P_MESSAGE"
            asan_options: "detect_leaks=0:detect_container_overflow=0"
          - corpus: "deserialize_invoice_clean"
            target: "deserialize_invoice"
            cxxflags: "-DLDK -DLND -DCLIGHTNING -DECLAIR -DCUSTOM_MUTATOR_BOLT11"
            asan_options: "detect_leaks=0:detect_container_overflow=0"
            pre_build: "(cd ./bitcoinfuzz/modules/bitcoin && make clean)"
          - corpus: "deserialize_offer"
            target: "deserialize_offer"
            cxxflags: "-DLDK -DCLIGHTNING -DCUSTOM_MUTATOR_BOLT12_OFFER"
            asan_options: "detect_leaks=0:detect_container_overflow=0"
            pre_build: "(cd ./bitcoinfuzz/modules/bitcoin && make clean)"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: ./.github/actions/setup-test-env
        with:
          os: ${{ matrix.os }}

      - name: Pre-build step
        if: matrix.test.pre_build != ''
        timeout-minutes: 5
        run: ${{ matrix.test.pre_build }}

      - name: Test - ${{ matrix.test.target }}
        timeout-minutes: 5
        run: |
          FUZZ=${{ matrix.test.target }} ./.github/scripts/run-fuzz.sh "${{ matrix.test.corpus }}" "${{ matrix.test.target }}" "${{ matrix.test.cxxflags }}" "${{ matrix.test.asan_options }}"
